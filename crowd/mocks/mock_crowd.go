// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ystv/web-auth/crowd (interfaces: Repo)
//
// Generated by this command:
//
//	mockgen -destination mocks/mock_crowd.go -package mock_crowd github.com/ystv/web-auth/crowd Repo
//

// Package mock_crowd is a generated GoMock package.
package mock_crowd

import (
	context "context"
	reflect "reflect"

	crowd "github.com/ystv/web-auth/crowd"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
	isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddCrowdApp mocks base method.
func (m *MockRepo) AddCrowdApp(arg0 context.Context, arg1 crowd.CrowdApp) (crowd.CrowdApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCrowdApp", arg0, arg1)
	ret0, _ := ret[0].(crowd.CrowdApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCrowdApp indicates an expected call of AddCrowdApp.
func (mr *MockRepoMockRecorder) AddCrowdApp(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCrowdApp", reflect.TypeOf((*MockRepo)(nil).AddCrowdApp), arg0, arg1)
}

// DeleteCrowdApp mocks base method.
func (m *MockRepo) DeleteCrowdApp(arg0 context.Context, arg1 crowd.CrowdApp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCrowdApp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCrowdApp indicates an expected call of DeleteCrowdApp.
func (mr *MockRepoMockRecorder) DeleteCrowdApp(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCrowdApp", reflect.TypeOf((*MockRepo)(nil).DeleteCrowdApp), arg0, arg1)
}

// EditCrowdApp mocks base method.
func (m *MockRepo) EditCrowdApp(arg0 context.Context, arg1 crowd.CrowdApp) (crowd.CrowdApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCrowdApp", arg0, arg1)
	ret0, _ := ret[0].(crowd.CrowdApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditCrowdApp indicates an expected call of EditCrowdApp.
func (mr *MockRepoMockRecorder) EditCrowdApp(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCrowdApp", reflect.TypeOf((*MockRepo)(nil).EditCrowdApp), arg0, arg1)
}

// GetCrowdApp mocks base method.
func (m *MockRepo) GetCrowdApp(arg0 context.Context, arg1 crowd.CrowdApp) (crowd.CrowdApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrowdApp", arg0, arg1)
	ret0, _ := ret[0].(crowd.CrowdApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrowdApp indicates an expected call of GetCrowdApp.
func (mr *MockRepoMockRecorder) GetCrowdApp(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrowdApp", reflect.TypeOf((*MockRepo)(nil).GetCrowdApp), arg0, arg1)
}

// GetCrowdApps mocks base method.
func (m *MockRepo) GetCrowdApps(arg0 context.Context, arg1 crowd.CrowdAppStatus) ([]crowd.CrowdApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrowdApps", arg0, arg1)
	ret0, _ := ret[0].([]crowd.CrowdApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrowdApps indicates an expected call of GetCrowdApps.
func (mr *MockRepoMockRecorder) GetCrowdApps(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrowdApps", reflect.TypeOf((*MockRepo)(nil).GetCrowdApps), arg0, arg1)
}

// VerifyCrowd mocks base method.
func (m *MockRepo) VerifyCrowd(arg0 context.Context, arg1 crowd.CrowdApp) (crowd.CrowdApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCrowd", arg0, arg1)
	ret0, _ := ret[0].(crowd.CrowdApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyCrowd indicates an expected call of VerifyCrowd.
func (mr *MockRepoMockRecorder) VerifyCrowd(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCrowd", reflect.TypeOf((*MockRepo)(nil).VerifyCrowd), arg0, arg1)
}
