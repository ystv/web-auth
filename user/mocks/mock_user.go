// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ystv/web-auth/user (interfaces: Repo)
//
// Generated by this command:
//
//	mockgen -destination mocks/mock_user.go -package mock_user github.com/ystv/web-auth/user Repo
//

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"

	permission "github.com/ystv/web-auth/permission"
	role "github.com/ystv/web-auth/role"
	user "github.com/ystv/web-auth/user"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
	isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddRolePermission mocks base method.
func (m *MockRepo) AddRolePermission(arg0 context.Context, arg1 user.RolePermission) (user.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRolePermission", arg0, arg1)
	ret0, _ := ret[0].(user.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRolePermission indicates an expected call of AddRolePermission.
func (mr *MockRepoMockRecorder) AddRolePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRolePermission", reflect.TypeOf((*MockRepo)(nil).AddRolePermission), arg0, arg1)
}

// AddRoleUser mocks base method.
func (m *MockRepo) AddRoleUser(arg0 context.Context, arg1 user.RoleUser) (user.RoleUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoleUser", arg0, arg1)
	ret0, _ := ret[0].(user.RoleUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoleUser indicates an expected call of AddRoleUser.
func (mr *MockRepoMockRecorder) AddRoleUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleUser", reflect.TypeOf((*MockRepo)(nil).AddRoleUser), arg0, arg1)
}

// AddUser mocks base method.
func (m *MockRepo) AddUser(arg0 context.Context, arg1 user.User, arg2 int) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockRepoMockRecorder) AddUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockRepo)(nil).AddUser), arg0, arg1, arg2)
}

// CountUsersAll mocks base method.
func (m *MockRepo) CountUsersAll(arg0 context.Context) (user.CountUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsersAll", arg0)
	ret0, _ := ret[0].(user.CountUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsersAll indicates an expected call of CountUsersAll.
func (mr *MockRepoMockRecorder) CountUsersAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsersAll", reflect.TypeOf((*MockRepo)(nil).CountUsersAll), arg0)
}

// DeleteUser mocks base method.
func (m *MockRepo) DeleteUser(arg0 context.Context, arg1 user.User, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepoMockRecorder) DeleteUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepo)(nil).DeleteUser), arg0, arg1, arg2)
}

// EditUser mocks base method.
func (m *MockRepo) EditUser(arg0 context.Context, arg1 user.User, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUser indicates an expected call of EditUser.
func (mr *MockRepoMockRecorder) EditUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUser", reflect.TypeOf((*MockRepo)(nil).EditUser), arg0, arg1, arg2)
}

// EditUserAvatar mocks base method.
func (m *MockRepo) EditUserAvatar(arg0 context.Context, arg1 user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUserAvatar", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUserAvatar indicates an expected call of EditUserAvatar.
func (mr *MockRepoMockRecorder) EditUserAvatar(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUserAvatar", reflect.TypeOf((*MockRepo)(nil).EditUserAvatar), arg0, arg1)
}

// EditUserAvatarUser mocks base method.
func (m *MockRepo) EditUserAvatarUser(arg0 context.Context, arg1 user.User, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUserAvatarUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUserAvatarUser indicates an expected call of EditUserAvatarUser.
func (mr *MockRepoMockRecorder) EditUserAvatarUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUserAvatarUser", reflect.TypeOf((*MockRepo)(nil).EditUserAvatarUser), arg0, arg1, arg2)
}

// EditUserPassword mocks base method.
func (m *MockRepo) EditUserPassword(arg0 context.Context, arg1 user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUserPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUserPassword indicates an expected call of EditUserPassword.
func (mr *MockRepoMockRecorder) EditUserPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUserPassword", reflect.TypeOf((*MockRepo)(nil).EditUserPassword), arg0, arg1)
}

// GetPermissionsForRole mocks base method.
func (m *MockRepo) GetPermissionsForRole(arg0 context.Context, arg1 role.Role) ([]permission.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsForRole", arg0, arg1)
	ret0, _ := ret[0].([]permission.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsForRole indicates an expected call of GetPermissionsForRole.
func (mr *MockRepoMockRecorder) GetPermissionsForRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsForRole", reflect.TypeOf((*MockRepo)(nil).GetPermissionsForRole), arg0, arg1)
}

// GetPermissionsForUser mocks base method.
func (m *MockRepo) GetPermissionsForUser(arg0 context.Context, arg1 user.User) ([]permission.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsForUser", arg0, arg1)
	ret0, _ := ret[0].([]permission.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsForUser indicates an expected call of GetPermissionsForUser.
func (mr *MockRepoMockRecorder) GetPermissionsForUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsForUser", reflect.TypeOf((*MockRepo)(nil).GetPermissionsForUser), arg0, arg1)
}

// GetPermissionsNotInRole mocks base method.
func (m *MockRepo) GetPermissionsNotInRole(arg0 context.Context, arg1 role.Role) ([]permission.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsNotInRole", arg0, arg1)
	ret0, _ := ret[0].([]permission.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsNotInRole indicates an expected call of GetPermissionsNotInRole.
func (mr *MockRepoMockRecorder) GetPermissionsNotInRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsNotInRole", reflect.TypeOf((*MockRepo)(nil).GetPermissionsNotInRole), arg0, arg1)
}

// GetRolePermission mocks base method.
func (m *MockRepo) GetRolePermission(arg0 context.Context, arg1 user.RolePermission) (user.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolePermission", arg0, arg1)
	ret0, _ := ret[0].(user.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolePermission indicates an expected call of GetRolePermission.
func (mr *MockRepoMockRecorder) GetRolePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolePermission", reflect.TypeOf((*MockRepo)(nil).GetRolePermission), arg0, arg1)
}

// GetRoleUser mocks base method.
func (m *MockRepo) GetRoleUser(arg0 context.Context, arg1 user.RoleUser) (user.RoleUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleUser", arg0, arg1)
	ret0, _ := ret[0].(user.RoleUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleUser indicates an expected call of GetRoleUser.
func (mr *MockRepoMockRecorder) GetRoleUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleUser", reflect.TypeOf((*MockRepo)(nil).GetRoleUser), arg0, arg1)
}

// GetRolesForPermission mocks base method.
func (m *MockRepo) GetRolesForPermission(arg0 context.Context, arg1 permission.Permission) ([]role.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesForPermission", arg0, arg1)
	ret0, _ := ret[0].([]role.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesForPermission indicates an expected call of GetRolesForPermission.
func (mr *MockRepoMockRecorder) GetRolesForPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesForPermission", reflect.TypeOf((*MockRepo)(nil).GetRolesForPermission), arg0, arg1)
}

// GetRolesForUser mocks base method.
func (m *MockRepo) GetRolesForUser(arg0 context.Context, arg1 user.User) ([]role.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesForUser", arg0, arg1)
	ret0, _ := ret[0].([]role.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesForUser indicates an expected call of GetRolesForUser.
func (mr *MockRepoMockRecorder) GetRolesForUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesForUser", reflect.TypeOf((*MockRepo)(nil).GetRolesForUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockRepo) GetUser(arg0 context.Context, arg1 user.User) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepoMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepo)(nil).GetUser), arg0, arg1)
}

// GetUserValid mocks base method.
func (m *MockRepo) GetUserValid(arg0 context.Context, arg1 user.User) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserValid", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserValid indicates an expected call of GetUserValid.
func (mr *MockRepoMockRecorder) GetUserValid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserValid", reflect.TypeOf((*MockRepo)(nil).GetUserValid), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockRepo) GetUsers(arg0 context.Context, arg1, arg2 int, arg3, arg4, arg5, arg6, arg7 string) ([]user.User, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockRepoMockRecorder) GetUsers(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockRepo)(nil).GetUsers), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// GetUsersForRole mocks base method.
func (m *MockRepo) GetUsersForRole(arg0 context.Context, arg1 role.Role) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersForRole", arg0, arg1)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersForRole indicates an expected call of GetUsersForRole.
func (mr *MockRepoMockRecorder) GetUsersForRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersForRole", reflect.TypeOf((*MockRepo)(nil).GetUsersForRole), arg0, arg1)
}

// GetUsersNotInRole mocks base method.
func (m *MockRepo) GetUsersNotInRole(arg0 context.Context, arg1 role.Role) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersNotInRole", arg0, arg1)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersNotInRole indicates an expected call of GetUsersNotInRole.
func (mr *MockRepoMockRecorder) GetUsersNotInRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersNotInRole", reflect.TypeOf((*MockRepo)(nil).GetUsersNotInRole), arg0, arg1)
}

// RemoveRolePermission mocks base method.
func (m *MockRepo) RemoveRolePermission(arg0 context.Context, arg1 user.RolePermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRolePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRolePermission indicates an expected call of RemoveRolePermission.
func (mr *MockRepoMockRecorder) RemoveRolePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRolePermission", reflect.TypeOf((*MockRepo)(nil).RemoveRolePermission), arg0, arg1)
}

// RemoveRoleUser mocks base method.
func (m *MockRepo) RemoveRoleUser(arg0 context.Context, arg1 user.RoleUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoleUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRoleUser indicates an expected call of RemoveRoleUser.
func (mr *MockRepoMockRecorder) RemoveRoleUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoleUser", reflect.TypeOf((*MockRepo)(nil).RemoveRoleUser), arg0, arg1)
}

// RemoveUserForRoles mocks base method.
func (m *MockRepo) RemoveUserForRoles(arg0 context.Context, arg1 user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserForRoles", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserForRoles indicates an expected call of RemoveUserForRoles.
func (mr *MockRepoMockRecorder) RemoveUserForRoles(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserForRoles", reflect.TypeOf((*MockRepo)(nil).RemoveUserForRoles), arg0, arg1)
}

// SetUserLoggedIn mocks base method.
func (m *MockRepo) SetUserLoggedIn(arg0 context.Context, arg1 user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserLoggedIn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserLoggedIn indicates an expected call of SetUserLoggedIn.
func (mr *MockRepoMockRecorder) SetUserLoggedIn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserLoggedIn", reflect.TypeOf((*MockRepo)(nil).SetUserLoggedIn), arg0, arg1)
}

// VerifyUser mocks base method.
func (m *MockRepo) VerifyUser(arg0 context.Context, arg1 user.User) (user.User, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockRepoMockRecorder) VerifyUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockRepo)(nil).VerifyUser), arg0, arg1)
}
