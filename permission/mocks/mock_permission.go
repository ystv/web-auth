// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ystv/web-auth/permission (interfaces: Repo)
//
// Generated by this command:
//
//	mockgen -destination mocks/mock_permission.go -package mock_permission github.com/ystv/web-auth/permission Repo
//

// Package mock_permission is a generated GoMock package.
package mock_permission

import (
	context "context"
	reflect "reflect"

	permission "github.com/ystv/web-auth/permission"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
	isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddPermission mocks base method.
func (m *MockRepo) AddPermission(arg0 context.Context, arg1 permission.Permission) (permission.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPermission", arg0, arg1)
	ret0, _ := ret[0].(permission.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPermission indicates an expected call of AddPermission.
func (mr *MockRepoMockRecorder) AddPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermission", reflect.TypeOf((*MockRepo)(nil).AddPermission), arg0, arg1)
}

// DeletePermission mocks base method.
func (m *MockRepo) DeletePermission(arg0 context.Context, arg1 permission.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockRepoMockRecorder) DeletePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockRepo)(nil).DeletePermission), arg0, arg1)
}

// EditPermission mocks base method.
func (m *MockRepo) EditPermission(arg0 context.Context, arg1 permission.Permission) (permission.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPermission", arg0, arg1)
	ret0, _ := ret[0].(permission.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditPermission indicates an expected call of EditPermission.
func (mr *MockRepoMockRecorder) EditPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPermission", reflect.TypeOf((*MockRepo)(nil).EditPermission), arg0, arg1)
}

// GetPermission mocks base method.
func (m *MockRepo) GetPermission(arg0 context.Context, arg1 permission.Permission) (permission.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", arg0, arg1)
	ret0, _ := ret[0].(permission.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockRepoMockRecorder) GetPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockRepo)(nil).GetPermission), arg0, arg1)
}

// GetPermissions mocks base method.
func (m *MockRepo) GetPermissions(arg0 context.Context) ([]permission.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions", arg0)
	ret0, _ := ret[0].([]permission.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockRepoMockRecorder) GetPermissions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockRepo)(nil).GetPermissions), arg0)
}

// RemovePermissionForRoles mocks base method.
func (m *MockRepo) RemovePermissionForRoles(arg0 context.Context, arg1 permission.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePermissionForRoles", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePermissionForRoles indicates an expected call of RemovePermissionForRoles.
func (mr *MockRepoMockRecorder) RemovePermissionForRoles(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermissionForRoles", reflect.TypeOf((*MockRepo)(nil).RemovePermissionForRoles), arg0, arg1)
}
