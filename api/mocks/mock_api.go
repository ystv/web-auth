// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ystv/web-auth/api (interfaces: Repo)
//
// Generated by this command:
//
//	mockgen -destination mocks/mock_api.go -package mock_api github.com/ystv/web-auth/api Repo
//

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	api "github.com/ystv/web-auth/api"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
	isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddToken mocks base method.
func (m *MockRepo) AddToken(ctx context.Context, t api.Token) (api.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToken", ctx, t)
	ret0, _ := ret[0].(api.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToken indicates an expected call of AddToken.
func (mr *MockRepoMockRecorder) AddToken(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToken", reflect.TypeOf((*MockRepo)(nil).AddToken), ctx, t)
}

// DeleteOldToken mocks base method.
func (m *MockRepo) DeleteOldToken(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldToken", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldToken indicates an expected call of DeleteOldToken.
func (mr *MockRepoMockRecorder) DeleteOldToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldToken", reflect.TypeOf((*MockRepo)(nil).DeleteOldToken), ctx)
}

// DeleteToken mocks base method.
func (m *MockRepo) DeleteToken(ctx context.Context, t api.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockRepoMockRecorder) DeleteToken(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockRepo)(nil).DeleteToken), ctx, t)
}

// GetToken mocks base method.
func (m *MockRepo) GetToken(ctx context.Context, t api.Token) (api.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, t)
	ret0, _ := ret[0].(api.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockRepoMockRecorder) GetToken(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockRepo)(nil).GetToken), ctx, t)
}

// GetTokens mocks base method.
func (m *MockRepo) GetTokens(ctx context.Context, userID int) ([]api.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokens", ctx, userID)
	ret0, _ := ret[0].([]api.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokens indicates an expected call of GetTokens.
func (mr *MockRepoMockRecorder) GetTokens(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokens", reflect.TypeOf((*MockRepo)(nil).GetTokens), ctx, userID)
}
