// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ystv/web-auth/role (interfaces: Repo)
//
// Generated by this command:
//
//	mockgen -destination mocks/mock_role.go -package mock_role github.com/ystv/web-auth/role Repo
//

// Package mock_role is a generated GoMock package.
package mock_role

import (
	context "context"
	reflect "reflect"

	role "github.com/ystv/web-auth/role"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
	isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddRole mocks base method.
func (m *MockRepo) AddRole(arg0 context.Context, arg1 role.Role) (role.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", arg0, arg1)
	ret0, _ := ret[0].(role.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRole indicates an expected call of AddRole.
func (mr *MockRepoMockRecorder) AddRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockRepo)(nil).AddRole), arg0, arg1)
}

// DeleteRole mocks base method.
func (m *MockRepo) DeleteRole(arg0 context.Context, arg1 role.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRepoMockRecorder) DeleteRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRepo)(nil).DeleteRole), arg0, arg1)
}

// EditRole mocks base method.
func (m *MockRepo) EditRole(arg0 context.Context, arg1 role.Role) (role.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditRole", arg0, arg1)
	ret0, _ := ret[0].(role.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditRole indicates an expected call of EditRole.
func (mr *MockRepoMockRecorder) EditRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditRole", reflect.TypeOf((*MockRepo)(nil).EditRole), arg0, arg1)
}

// GetRole mocks base method.
func (m *MockRepo) GetRole(arg0 context.Context, arg1 role.Role) (role.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", arg0, arg1)
	ret0, _ := ret[0].(role.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockRepoMockRecorder) GetRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockRepo)(nil).GetRole), arg0, arg1)
}

// GetRoles mocks base method.
func (m *MockRepo) GetRoles(arg0 context.Context) ([]role.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", arg0)
	ret0, _ := ret[0].([]role.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockRepoMockRecorder) GetRoles(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockRepo)(nil).GetRoles), arg0)
}

// RemoveRoleForPermissions mocks base method.
func (m *MockRepo) RemoveRoleForPermissions(arg0 context.Context, arg1 role.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoleForPermissions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRoleForPermissions indicates an expected call of RemoveRoleForPermissions.
func (mr *MockRepoMockRecorder) RemoveRoleForPermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoleForPermissions", reflect.TypeOf((*MockRepo)(nil).RemoveRoleForPermissions), arg0, arg1)
}

// RemoveRoleForUsers mocks base method.
func (m *MockRepo) RemoveRoleForUsers(arg0 context.Context, arg1 role.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoleForUsers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRoleForUsers indicates an expected call of RemoveRoleForUsers.
func (mr *MockRepoMockRecorder) RemoveRoleForUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoleForUsers", reflect.TypeOf((*MockRepo)(nil).RemoveRoleForUsers), arg0, arg1)
}
