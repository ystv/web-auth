// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ystv/web-auth/officership (interfaces: Repo)
//
// Generated by this command:
//
//	mockgen -destination mocks/mock_officership.go -package mock_officership github.com/ystv/web-auth/officership Repo
//

// Package mock_officership is a generated GoMock package.
package mock_officership

import (
	context "context"
	reflect "reflect"

	officership "github.com/ystv/web-auth/officership"
	user "github.com/ystv/web-auth/user"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
	isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddOfficership mocks base method.
func (m *MockRepo) AddOfficership(arg0 context.Context, arg1 officership.Officership) (officership.Officership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOfficership", arg0, arg1)
	ret0, _ := ret[0].(officership.Officership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOfficership indicates an expected call of AddOfficership.
func (mr *MockRepoMockRecorder) AddOfficership(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOfficership", reflect.TypeOf((*MockRepo)(nil).AddOfficership), arg0, arg1)
}

// AddOfficershipMember mocks base method.
func (m *MockRepo) AddOfficershipMember(arg0 context.Context, arg1 officership.OfficershipMember) (officership.OfficershipMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOfficershipMember", arg0, arg1)
	ret0, _ := ret[0].(officership.OfficershipMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOfficershipMember indicates an expected call of AddOfficershipMember.
func (mr *MockRepoMockRecorder) AddOfficershipMember(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOfficershipMember", reflect.TypeOf((*MockRepo)(nil).AddOfficershipMember), arg0, arg1)
}

// AddOfficershipTeam mocks base method.
func (m *MockRepo) AddOfficershipTeam(arg0 context.Context, arg1 officership.OfficershipTeam) (officership.OfficershipTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOfficershipTeam", arg0, arg1)
	ret0, _ := ret[0].(officership.OfficershipTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOfficershipTeam indicates an expected call of AddOfficershipTeam.
func (mr *MockRepoMockRecorder) AddOfficershipTeam(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOfficershipTeam", reflect.TypeOf((*MockRepo)(nil).AddOfficershipTeam), arg0, arg1)
}

// AddOfficershipTeamMember mocks base method.
func (m *MockRepo) AddOfficershipTeamMember(arg0 context.Context, arg1 officership.OfficershipTeamMember) (officership.OfficershipTeamMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOfficershipTeamMember", arg0, arg1)
	ret0, _ := ret[0].(officership.OfficershipTeamMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOfficershipTeamMember indicates an expected call of AddOfficershipTeamMember.
func (mr *MockRepoMockRecorder) AddOfficershipTeamMember(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOfficershipTeamMember", reflect.TypeOf((*MockRepo)(nil).AddOfficershipTeamMember), arg0, arg1)
}

// CountOfficerships mocks base method.
func (m *MockRepo) CountOfficerships(arg0 context.Context) (officership.CountOfficerships, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountOfficerships", arg0)
	ret0, _ := ret[0].(officership.CountOfficerships)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountOfficerships indicates an expected call of CountOfficerships.
func (mr *MockRepoMockRecorder) CountOfficerships(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountOfficerships", reflect.TypeOf((*MockRepo)(nil).CountOfficerships), arg0)
}

// DeleteOfficership mocks base method.
func (m *MockRepo) DeleteOfficership(arg0 context.Context, arg1 officership.Officership) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOfficership", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOfficership indicates an expected call of DeleteOfficership.
func (mr *MockRepoMockRecorder) DeleteOfficership(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOfficership", reflect.TypeOf((*MockRepo)(nil).DeleteOfficership), arg0, arg1)
}

// DeleteOfficershipMember mocks base method.
func (m *MockRepo) DeleteOfficershipMember(arg0 context.Context, arg1 officership.OfficershipMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOfficershipMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOfficershipMember indicates an expected call of DeleteOfficershipMember.
func (mr *MockRepoMockRecorder) DeleteOfficershipMember(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOfficershipMember", reflect.TypeOf((*MockRepo)(nil).DeleteOfficershipMember), arg0, arg1)
}

// DeleteOfficershipTeam mocks base method.
func (m *MockRepo) DeleteOfficershipTeam(arg0 context.Context, arg1 officership.OfficershipTeam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOfficershipTeam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOfficershipTeam indicates an expected call of DeleteOfficershipTeam.
func (mr *MockRepoMockRecorder) DeleteOfficershipTeam(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOfficershipTeam", reflect.TypeOf((*MockRepo)(nil).DeleteOfficershipTeam), arg0, arg1)
}

// DeleteOfficershipTeamMember mocks base method.
func (m *MockRepo) DeleteOfficershipTeamMember(arg0 context.Context, arg1 officership.OfficershipTeamMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOfficershipTeamMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOfficershipTeamMember indicates an expected call of DeleteOfficershipTeamMember.
func (mr *MockRepoMockRecorder) DeleteOfficershipTeamMember(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOfficershipTeamMember", reflect.TypeOf((*MockRepo)(nil).DeleteOfficershipTeamMember), arg0, arg1)
}

// EditOfficership mocks base method.
func (m *MockRepo) EditOfficership(arg0 context.Context, arg1 officership.Officership) (officership.Officership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditOfficership", arg0, arg1)
	ret0, _ := ret[0].(officership.Officership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditOfficership indicates an expected call of EditOfficership.
func (mr *MockRepoMockRecorder) EditOfficership(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOfficership", reflect.TypeOf((*MockRepo)(nil).EditOfficership), arg0, arg1)
}

// EditOfficershipMember mocks base method.
func (m *MockRepo) EditOfficershipMember(arg0 context.Context, arg1 officership.OfficershipMember) (officership.OfficershipMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditOfficershipMember", arg0, arg1)
	ret0, _ := ret[0].(officership.OfficershipMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditOfficershipMember indicates an expected call of EditOfficershipMember.
func (mr *MockRepoMockRecorder) EditOfficershipMember(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOfficershipMember", reflect.TypeOf((*MockRepo)(nil).EditOfficershipMember), arg0, arg1)
}

// EditOfficershipTeam mocks base method.
func (m *MockRepo) EditOfficershipTeam(arg0 context.Context, arg1 officership.OfficershipTeam) (officership.OfficershipTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditOfficershipTeam", arg0, arg1)
	ret0, _ := ret[0].(officership.OfficershipTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditOfficershipTeam indicates an expected call of EditOfficershipTeam.
func (mr *MockRepoMockRecorder) EditOfficershipTeam(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOfficershipTeam", reflect.TypeOf((*MockRepo)(nil).EditOfficershipTeam), arg0, arg1)
}

// GetOfficership mocks base method.
func (m *MockRepo) GetOfficership(arg0 context.Context, arg1 officership.Officership) (officership.Officership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficership", arg0, arg1)
	ret0, _ := ret[0].(officership.Officership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficership indicates an expected call of GetOfficership.
func (mr *MockRepoMockRecorder) GetOfficership(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficership", reflect.TypeOf((*MockRepo)(nil).GetOfficership), arg0, arg1)
}

// GetOfficershipMember mocks base method.
func (m *MockRepo) GetOfficershipMember(arg0 context.Context, arg1 officership.OfficershipMember) (officership.OfficershipMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficershipMember", arg0, arg1)
	ret0, _ := ret[0].(officership.OfficershipMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficershipMember indicates an expected call of GetOfficershipMember.
func (mr *MockRepoMockRecorder) GetOfficershipMember(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficershipMember", reflect.TypeOf((*MockRepo)(nil).GetOfficershipMember), arg0, arg1)
}

// GetOfficershipMembers mocks base method.
func (m *MockRepo) GetOfficershipMembers(arg0 context.Context, arg1 *officership.Officership, arg2 *user.User, arg3, arg4 officership.OfficershipsStatus, arg5 bool) ([]officership.OfficershipMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficershipMembers", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]officership.OfficershipMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficershipMembers indicates an expected call of GetOfficershipMembers.
func (mr *MockRepoMockRecorder) GetOfficershipMembers(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficershipMembers", reflect.TypeOf((*MockRepo)(nil).GetOfficershipMembers), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetOfficershipTeam mocks base method.
func (m *MockRepo) GetOfficershipTeam(arg0 context.Context, arg1 officership.OfficershipTeam) (officership.OfficershipTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficershipTeam", arg0, arg1)
	ret0, _ := ret[0].(officership.OfficershipTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficershipTeam indicates an expected call of GetOfficershipTeam.
func (mr *MockRepoMockRecorder) GetOfficershipTeam(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficershipTeam", reflect.TypeOf((*MockRepo)(nil).GetOfficershipTeam), arg0, arg1)
}

// GetOfficershipTeamMember mocks base method.
func (m *MockRepo) GetOfficershipTeamMember(arg0 context.Context, arg1 officership.OfficershipTeamMember) (officership.OfficershipTeamMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficershipTeamMember", arg0, arg1)
	ret0, _ := ret[0].(officership.OfficershipTeamMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficershipTeamMember indicates an expected call of GetOfficershipTeamMember.
func (mr *MockRepoMockRecorder) GetOfficershipTeamMember(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficershipTeamMember", reflect.TypeOf((*MockRepo)(nil).GetOfficershipTeamMember), arg0, arg1)
}

// GetOfficershipTeamMembers mocks base method.
func (m *MockRepo) GetOfficershipTeamMembers(arg0 context.Context, arg1 *officership.OfficershipTeam, arg2 officership.OfficershipsStatus) ([]officership.OfficershipTeamMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficershipTeamMembers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]officership.OfficershipTeamMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficershipTeamMembers indicates an expected call of GetOfficershipTeamMembers.
func (mr *MockRepoMockRecorder) GetOfficershipTeamMembers(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficershipTeamMembers", reflect.TypeOf((*MockRepo)(nil).GetOfficershipTeamMembers), arg0, arg1, arg2)
}

// GetOfficershipTeams mocks base method.
func (m *MockRepo) GetOfficershipTeams(arg0 context.Context) ([]officership.OfficershipTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficershipTeams", arg0)
	ret0, _ := ret[0].([]officership.OfficershipTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficershipTeams indicates an expected call of GetOfficershipTeams.
func (mr *MockRepoMockRecorder) GetOfficershipTeams(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficershipTeams", reflect.TypeOf((*MockRepo)(nil).GetOfficershipTeams), arg0)
}

// GetOfficerships mocks base method.
func (m *MockRepo) GetOfficerships(arg0 context.Context, arg1 officership.OfficershipsStatus) ([]officership.Officership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficerships", arg0, arg1)
	ret0, _ := ret[0].([]officership.Officership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficerships indicates an expected call of GetOfficerships.
func (mr *MockRepoMockRecorder) GetOfficerships(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficerships", reflect.TypeOf((*MockRepo)(nil).GetOfficerships), arg0, arg1)
}

// GetOfficershipsNotInTeam mocks base method.
func (m *MockRepo) GetOfficershipsNotInTeam(arg0 context.Context, arg1 officership.OfficershipTeam) ([]officership.Officership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficershipsNotInTeam", arg0, arg1)
	ret0, _ := ret[0].([]officership.Officership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficershipsNotInTeam indicates an expected call of GetOfficershipsNotInTeam.
func (mr *MockRepoMockRecorder) GetOfficershipsNotInTeam(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficershipsNotInTeam", reflect.TypeOf((*MockRepo)(nil).GetOfficershipsNotInTeam), arg0, arg1)
}

// RemoveOfficershipForOfficershipMembers mocks base method.
func (m *MockRepo) RemoveOfficershipForOfficershipMembers(arg0 context.Context, arg1 officership.Officership) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOfficershipForOfficershipMembers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOfficershipForOfficershipMembers indicates an expected call of RemoveOfficershipForOfficershipMembers.
func (mr *MockRepoMockRecorder) RemoveOfficershipForOfficershipMembers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOfficershipForOfficershipMembers", reflect.TypeOf((*MockRepo)(nil).RemoveOfficershipForOfficershipMembers), arg0, arg1)
}

// RemoveTeamForOfficershipTeamMembers mocks base method.
func (m *MockRepo) RemoveTeamForOfficershipTeamMembers(arg0 context.Context, arg1 officership.OfficershipTeam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamForOfficershipTeamMembers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTeamForOfficershipTeamMembers indicates an expected call of RemoveTeamForOfficershipTeamMembers.
func (mr *MockRepoMockRecorder) RemoveTeamForOfficershipTeamMembers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamForOfficershipTeamMembers", reflect.TypeOf((*MockRepo)(nil).RemoveTeamForOfficershipTeamMembers), arg0, arg1)
}

// RemoveUserForOfficershipMembers mocks base method.
func (m *MockRepo) RemoveUserForOfficershipMembers(arg0 context.Context, arg1 user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserForOfficershipMembers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserForOfficershipMembers indicates an expected call of RemoveUserForOfficershipMembers.
func (mr *MockRepoMockRecorder) RemoveUserForOfficershipMembers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserForOfficershipMembers", reflect.TypeOf((*MockRepo)(nil).RemoveUserForOfficershipMembers), arg0, arg1)
}
