{{define "_pagination"}}
    <script>
        /* * * * * * * * * * * * * * * * *
        * Pagination
        * javascript page navigation
        * * * * * * * * * * * * * * * * */

        const Pagination = {

            code: '',

            // --------------------
            // Utility
            // --------------------

            // converting initialise data
            Extend: function (data) {
                data = data || {};
                Pagination.size = data.size || 300;
                Pagination.page = data.page || 1;
                Pagination.step = data.step || 3;
            },

            // add pages by number (from [s] to [f])
            Add: function (s, f) {
                for (let i = s; i < f; i++) {
                    Pagination.code += '<a class="button is-link is-outlined" href="/internal/users?size={{.Sort.Size}}&page=' + i + '{{if .Sort.Search}}&search={{.Sort.Search}}{{end}}{{if .Sort.Column}}&column={{.Sort.Column}}{{end}}{{if .Sort.Direction}}&direction={{.Sort.Direction}}{{end}}">' + i + '</a>';
                }
            },

            // add last page with separator
            Last: function () {
                Pagination.code += '<i class="button is-outlined">...</i><a class="button is-link is-outlined" href="/internal/users?size={{.Sort.Size}}&page=' + Pagination.size + '{{if .Sort.Search}}&search={{.Sort.Search}}{{end}}{{if .Sort.Column}}&column={{.Sort.Column}}{{end}}{{if .Sort.Direction}}&direction={{.Sort.Direction}}{{end}}">' + Pagination.size + '</a>';
            },

            // add first page with separator
            First: function () {
                Pagination.code += '<a class="button is-link is-outlined" href="/internal/users?size={{.Sort.Size}}&page=1{{if .Sort.Search}}&search={{.Sort.Search}}{{end}}{{if .Sort.Column}}&column={{.Sort.Column}}{{end}}{{if .Sort.Direction}}&direction={{.Sort.Direction}}{{end}}">1</a><i class="button is-outlined">...</i>';
            },


            // --------------------
            // Handlers
            // --------------------

            // change page
            Click: function () {
                Pagination.page = +this.innerHTML;
                location.href
                Pagination.Start();
            },

            // previous page
            Prev: function () {
                Pagination.page--;
                if (Pagination.page < 1) {
                    Pagination.page = 1;
                }
                Pagination.Start();
            },

            // next page
            Next: function () {
                Pagination.page++;
                if (Pagination.page > Pagination.size) {
                    Pagination.page = Pagination.size;
                }

                Pagination.Start();
            },


            // --------------------
            // Script
            // --------------------

            // binding pages
            Bind: function () {
                const a = Pagination.e.getElementsByTagName('a');
                for (let i = 0; i < a.length; i++) {
                    if (+a[i].innerHTML === Pagination.page) a[i].className = 'button is-link';
                    a[i].addEventListener('click', Pagination.Click, false);
                }
            },
            // write pagination
            Finish: function () {
                Pagination.e.innerHTML = Pagination.code;
                Pagination.code = '';
                Pagination.Bind();
            },

            // find pagination type
            Start: function () {
                if (Pagination.size < Pagination.step * 2 + 6) {
                    Pagination.Add(1, Pagination.size + 1);
                } else if (Pagination.page < Pagination.step * 2 + 1) {
                    Pagination.Add(1, Pagination.step * 2 + 4);
                    Pagination.Last();
                } else if (Pagination.page > Pagination.size - Pagination.step * 2) {
                    Pagination.First();
                    Pagination.Add(Pagination.size - Pagination.step * 2 - 2, Pagination.size + 1);
                } else {
                    Pagination.First();
                    Pagination.Add(Pagination.page - Pagination.step, Pagination.page + Pagination.step + 1);
                    Pagination.Last();
                }
                Pagination.Finish();
            },


            // --------------------
            // Initialization
            // --------------------

            // binding buttons
            Buttons: function (e) {
                const nav = e.getElementsByTagName('a');
                nav[0].addEventListener('click', Pagination.Prev, false);
                nav[1].addEventListener('click', Pagination.Next, false);
            },

            // create skeleton
            Create: function (e) {

                const html = [
                    '<div class="field"><p class="control">',
                    '<a class="button is-link is-outlined" href="/internal/users?size={{.Sort.Size}}&page={{if eq (dec .Sort.PageNumber) 0}}1{{else}}{{dec .Sort.PageNumber}}{{end}}{{if .Sort.Search}}&search={{.Sort.Search}}{{end}}{{if .Sort.Column}}&column={{.Sort.Column}}{{end}}{{if .Sort.Direction}}&direction={{.Sort.Direction}}{{end}}">&#9668;</a>', // previous button
                    '<span></span>',  // pagination container
                    '<a class="button is-link is-outlined" href="/internal/users?size={{.Sort.Size}}&page={{if gt (inc .Sort.PageNumber) .Sort.Pages}}{{.Sort.Pages}}{{else}}{{inc .Sort.PageNumber}}{{end}}{{if .Sort.Search}}&search={{.Sort.Search}}{{end}}{{if .Sort.Column}}&column={{.Sort.Column}}{{end}}{{if .Sort.Direction}}&direction={{.Sort.Direction}}{{end}}">&#9658;</a>', // next button
                    '</div></p>'
                ];

                e.innerHTML = html.join('');
                Pagination.e = e.getElementsByTagName('span')[0];
                Pagination.Buttons(e);
            },

            // init
            Init: function (e, data) {
                Pagination.Extend(data);
                Pagination.Create(e);
                Pagination.Start();
            }
        };


        /* * * * * * * * * * * * * * * * *
        * Initialization
        * * * * * * * * * * * * * * * * */

        const init = function () {
            Pagination.Init(document.getElementById('pagination'), {
                size: {{.Sort.Pages}}, // pages size
                page: {{.Sort.PageNumber}},  // selected page
                step: 3   // pages before and after current
            });
        };

        document.addEventListener('DOMContentLoaded', init, false);
    </script>
{{end}}